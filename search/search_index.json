{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Streamlit-MSAL-2: Yet Another MSAL for Streamlit","text":""},{"location":"#motivation","title":"Motivation","text":"<p>This is a workaround for streamlit to use msal authentication process in an enterprise environment, which in many cases using ConfidentialClientApplication, and requiring checking user roles.</p>"},{"location":"#how-to-install","title":"How to Install","text":"Bash<pre><code>pip install streamlit-msal-2\n</code></pre>"},{"location":"#how-it-works","title":"How It Works","text":"<ul> <li>this package is using streamlit-msal in the background for the authentication.<ul> <li>however, streamlit-msal does not specially integrate msal ConfidentialClientApplication, while this is usually mandatorily required by enterprise use cases</li> </ul> </li> <li>to simplify enterprise use cases, this package adds some additional role checking after streamlit-msal sign in<ul> <li>these required roles can be directly configured in the Microsoft Azure App registration.</li> <li>by assigning user roles in App registration enterprise configuration, the authentication process can automatically check the signed in user's App roles, if it fulfills the predefined user roles, users can go further in streamlit</li> </ul> </li> </ul>"},{"location":"#how-to-configure-and-use","title":"How to Configure and Use","text":""},{"location":"#configure-azure-app-registration","title":"Configure Azure App Registration","text":"<ul> <li>go Microsoft Azure portal</li> <li>search <code>App registration</code>, and click into it</li> <li> <p>select an existing <code>App registration</code>, or create a new one if you do not have</p> <ul> <li></li> </ul> </li> <li> <p>click to copy your <code>tenant id</code> and <code>client id</code></p> <ul> <li></li> </ul> </li> <li> <p>add <code>App roles</code></p> <ul> <li></li> </ul> </li> <li> <p>in <code>Authentication</code>, you have to add single-page application. for local test runs, if using streamlit default port, add <code>http://localhost:8501</code></p> </li> </ul>"},{"location":"#configure-enterprise-application","title":"Configure Enterprise Application","text":"<ul> <li> <p>go to <code>Enterprise Application</code> in <code>Overview</code> page</p> <ul> <li></li> </ul> </li> <li> <p>add your target users, and remember to select the corresponding App roles you just created</p> <ul> <li></li> </ul> </li> </ul>"},{"location":"#streamlit-python-code","title":"Streamlit Python Code","text":"<ul> <li>run pip install</li> </ul> Bash<pre><code>pip install streamlit-msal-2\n</code></pre> <ul> <li>integrate the package in your streamlit code</li> </ul> Python<pre><code>import streamlit as st\nfrom streamlit_msal_2 import init_auth\n\n\nst.title(\"Streamlit MSAL Example\")\n\nclient_id = \"your_client_id\"\ntenant_id = \"your_tenant_id\"\nuser_roles = {\n    \"ExampleApp.Admin\": \"ExampleApp.Admin\",\n    \"ExampleApp.User\": \"ExampleApp.User\",\n}\n\ninit_auth(user_roles, tenant_id, client_id)\n\nst.write(f\"Welcome, {st.session_state.username}\")\n</code></pre> <p>The user sign information is stored in <code>st.session_state.auth_data</code>, the user name is stored in <code>st.session_state.username</code>, and the user roles are stored in <code>st.session_state.roles</code>.</p> <p>Details check example folder</p>"},{"location":"#known-issues-and-limitations","title":"Known Issues and Limitations","text":"<ul> <li>the client_secret is not actually integrated into the process, the streamlit-msal package is in the background using PublicClientApplication sign in process. yet by defining the required App roles of user, it still can work to certain extend to make sure the sign-in user is the actually the target user</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>streamlit_msal_2</li> </ul>"},{"location":"reference/streamlit_msal_2/","title":"API Reference","text":""},{"location":"reference/streamlit_msal_2/#streamlit_msal_2.init_auth","title":"<code>init_auth(user_roles=None, tenant_id=None, client_id=None, email_suffix=None)</code>","text":"<p>Initializes the authentication process.</p> <p>This function initializes the authentication process by checking the user's account and role. If the user's account is not valid or does not have the required role, the function stops and displays an error message. If the user's account is valid and has the required role, the function sets the necessary information to the session state. The user sign information is stored in <code>st.session_state.auth_data</code>, the user name is stored in <code>st.session_state.username</code>, and the user roles are stored in <code>st.session_state.roles</code>.</p> <p>Parameters:</p> Name Type Description Default <code>user_roles</code> <code>dict</code> <p>A dictionary containing the required roles. The keys are the role names and the values are the role descriptions. The default value is None. This corresponds to the user roles defined in the Azure App registration. The value of each key should be the value defined in the Azure App registration.</p> <code>None</code> <code>tenant_id</code> <code>str</code> <p>The tenant ID in Microsoft Azure. If the <code>TENANT_ID</code> is already set in the environment variables, this argument is not required. If no <code>TENANT_ID</code> is found in the environment variables, and no passed value is provided, streamlit will stop.</p> <code>None</code> <code>client_id</code> <code>str</code> <p>The client ID from Microsoft Azure App registration. If the <code>CLIENT_ID</code> is already set in the environment variables, this argument is not required. If no <code>CLIENT_ID</code> is found in the environment variables, and no passed value is provided, streamlit will stop.</p> <code>None</code> <code>email_suffix</code> <code>str</code> <p>The email suffix to match with the enterprise email suffix. The default value is None. If it is None, the function will not check the email suffix. The email suffix such as <code>@microsoft.com</code> is used to check whether the login user's email has valid enterprise email.</p> <code>None</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; user_roles = {\n...     \"Admin\": \"Admin role\",\n...     \"User\": \"User role\",\n... }\n&gt;&gt;&gt; tenant_id = \"your_tenant_id\"\n&gt;&gt;&gt; client_id = \"your_client_id\"\n&gt;&gt;&gt; email_suffix = \"@microsoft.com\"\n&gt;&gt;&gt; init_auth(user_roles, tenant_id, client_id, email_suffix)\n</code></pre> Source code in <code>src/streamlit_msal_2/__init__.py</code> Python<pre><code>def init_auth(\n    user_roles: dict = None,\n    tenant_id: str = None,\n    client_id: str = None,\n    email_suffix: str = None,\n) -&gt; None:\n    \"\"\"\n    Initializes the authentication process.\n\n    This function initializes the authentication process by checking the user's\n    account and role. If the user's account is not valid or does not have the\n    required role, the function stops and displays an error message. If the\n    user's account is valid and has the required role, the function sets the\n    necessary information to the session state. The user sign information is\n    stored in `st.session_state.auth_data`, the user name is stored in\n    `st.session_state.username`, and the user roles are stored in\n    `st.session_state.roles`.\n\n    Args:\n        user_roles (dict): A dictionary containing the required roles. The keys\n            are the role names and the values are the role descriptions. The\n            default value is None. This corresponds to the user roles defined\n            in the Azure App registration. The value of each key should be the\n            value defined in the Azure App registration.\n        tenant_id (str): The tenant ID in Microsoft Azure. If the `TENANT_ID`\n            is already set in the environment variables, this argument is not\n            required. If no `TENANT_ID` is found in the environment variables,\n            and no passed value is provided, streamlit will stop.\n        client_id (str): The client ID from Microsoft Azure App registration.\n            If the `CLIENT_ID` is already set in the environment variables,\n            this argument is not required. If no `CLIENT_ID` is found in the\n            environment variables, and no passed value is provided, streamlit\n            will stop.\n        email_suffix (str): The email suffix to match with the enterprise email\n            suffix. The default value is None. If it is None, the function will\n            not check the email suffix. The email suffix such as\n            `@microsoft.com` is used to check whether the login user's email\n            has valid enterprise email.\n\n    Examples:\n        &gt;&gt;&gt; user_roles = {\n        ...     \"Admin\": \"Admin role\",\n        ...     \"User\": \"User role\",\n        ... }\n        &gt;&gt;&gt; tenant_id = \"your_tenant_id\"\n        &gt;&gt;&gt; client_id = \"your_client_id\"\n        &gt;&gt;&gt; email_suffix = \"@microsoft.com\"\n        &gt;&gt;&gt; init_auth(user_roles, tenant_id, client_id, email_suffix)\n    \"\"\"\n    client_id = client_id or os.getenv(\"CLIENT_ID\", None)\n    tenant_id = tenant_id or os.getenv(\"TENANT_ID\", None)\n\n    if tenant_id is None or client_id is None:\n        st.warning(\n            \"Tenant ID and client ID cannot be None! \"\n            f\"Your input: tenant_id={tenant_id}, client_id={client_id}. \\n\"\n            \"Please set the TENANT_ID environment variable\"\n        )\n        st.stop()\n\n    with st.sidebar:\n        auth_data = Msal.initialize_ui(\n            client_id=client_id,\n            authority=f\"https://login.microsoftonline.com/{tenant_id}\",\n            scopes=[],\n            connecting_label=\"Connecting\",\n            disconnected_label=\"Disconnected\",\n            sign_in_label=\"Sign in\",\n            sign_out_label=\"Sign out\",\n        )\n\n        if not auth_data:\n            # not valid enterprise account\n            st.warning(\"Invalid account! No permission found for you\")\n            st.stop()\n\n        if email_suffix is not None:\n            # in case to match with enterprise email suffix\n            # e.g., @microsoft.com\n            if email_suffix not in auth_data[\"account\"][\"username\"]:\n                st.warning(\"Invalid account! No permission found for you\")\n                st.stop()\n\n        if _check_role(auth_data[\"idTokenClaims\"], user_roles) is False:\n            # check the login user has the required roles defined\n            # in the Microsoft Azure App registration\n            st.warning(\n                f\"Hello, {auth_data['account']['name']}, \"\n                \"No permission found for you\"\n            )\n            st.stop()\n\n        if \"auth_data\" not in st.session_state:\n            # set the names to the session state\n            st.session_state.auth_data = auth_data\n            st.session_state.username = auth_data[\"account\"][\"name\"]\n\n            st.session_state.roles = auth_data[\"idTokenClaims\"][\"roles\"]\n</code></pre>"}]}