{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Streamlit-MSAL-2: Yet Another MSAL for Streamlit","text":"<p>Yet another msal Single-Sign-On module of streamlit applications also for ConfidentialClientApplication by checking required App roles of signed-in users in the enterprise setup, and support obo flow.</p> <p> </p>"},{"location":"#1-motivation","title":"1. Motivation","text":"<p>This is a workaround for streamlit to use msal authentication process in an enterprise environment, which in many cases using ConfidentialClientApplication, and requiring checking user roles.</p>"},{"location":"#2-how-to-install","title":"2. How to Install","text":"Bash<pre><code>pip install streamlit-msal-2\n</code></pre>"},{"location":"#3-how-it-works","title":"3. How It Works","text":"<ul> <li>this package is using streamlit-msal in the background for the authentication.<ul> <li>however, streamlit-msal does not specially integrate msal ConfidentialClientApplication, while this is usually mandatorily required by enterprise use cases</li> </ul> </li> <li>to simplify enterprise use cases, this package adds some additional role checking after streamlit-msal sign in<ul> <li>these required roles can be directly configured in the Microsoft Azure App registration.</li> <li>by assigning user roles in App registration enterprise configuration, the authentication process can automatically check the signed in user's App roles, if it fulfills the predefined user roles, users can go further in streamlit</li> </ul> </li> </ul>"},{"location":"#4-how-to-configure-and-use","title":"4. How to Configure and Use","text":""},{"location":"#41-configure-azure-app-registration","title":"4.1 Configure Azure App Registration","text":"<ul> <li>go Microsoft Azure portal</li> <li>search <code>App registration</code>, and click into it</li> <li> <p>select an existing <code>App registration</code>, or create a new one if you do not have</p> <ul> <li></li> </ul> </li> <li> <p>click to copy your <code>tenant id</code> and <code>client id</code></p> <ul> <li></li> </ul> </li> <li> <p>add <code>App roles</code></p> <ul> <li></li> </ul> </li> <li> <p>in <code>Authentication</code>, you have to add single-page application. for local test runs, if using streamlit default port, add <code>http://localhost:8501</code></p> </li> </ul>"},{"location":"#42-configure-enterprise-application","title":"4.2 Configure Enterprise Application","text":"<ul> <li> <p>go to <code>Enterprise Application</code> in <code>Overview</code> page</p> <ul> <li></li> </ul> </li> <li> <p>add your target users, and remember to select the corresponding App roles you just created</p> <ul> <li></li> </ul> </li> </ul>"},{"location":"#43-authentication-base-use-case","title":"4.3 Authentication Base Use Case","text":"<ul> <li>run pip install</li> </ul> Bash<pre><code>pip install streamlit-msal-2\n</code></pre> <ul> <li>integrate the package in your streamlit code</li> </ul> Python<pre><code>import streamlit as st\nfrom streamlit_msal_2 import init_auth\n\n\nst.title(\"Streamlit MSAL Example\")\n\nclient_id = \"your_client_id\"\ntenant_id = \"your_tenant_id\"\nuser_roles = {\n    \"ExampleApp.Admin\": \"ExampleApp.Admin\",\n    \"ExampleApp.User\": \"ExampleApp.User\",\n}\n\ninit_auth(user_roles, tenant_id, client_id)\n\nst.write(f\"Welcome, {st.session_state.username}\")\n</code></pre> <p>The user sign information is stored in <code>st.session_state.auth_data</code>, the user name is stored in <code>st.session_state.username</code>, and the user roles are stored in <code>st.session_state.roles</code>.</p> <p>Details check example folder</p>"},{"location":"#44-obo-process","title":"4.4 OBO Process","text":"<ul> <li>obo token generation process can be triggered in <code>init_auth</code>, by setting the argument <code>init_obo_process=True</code></li> <li> <p>if you do not need obo process, just keep the default setting, not to set <code>init_obo_process</code> to <code>True</code>, since it will raise error if you miss additionally required arguments</p> </li> <li> <p>additional arguments need to be provided for obo process, including the <code>client_secret</code> of the original <code>client_id</code>, the scope of the downstream API</p> </li> <li> <p>obo token generation process stores the information in <code>st.session_state.obo_info</code></p> </li> <li> <p><code>st.session_state.obo_info</code> is a dictionary:</p> </li> </ul> Python<pre><code>{\n    \"obo_token\": \"...\",\n    \"refresh_token\": \"...\",\n    \"expires_at\": \"...\"\n}\n</code></pre> <ul> <li> <p>For easy-to-use reasons, the 'obo_token' is also stored at <code>st.session_state.obo_token</code> and system environment variable 'OBO_TOKEN'</p> </li> <li> <p>Usage example:</p> </li> </ul> Python<pre><code>import streamlit as st\nfrom streamlit_msal_2 import init_auth, refresh_obo_token\n\n\nst.title(\"Streamlit MSAL Example\")\n\nclient_id = \"your_client_id\"\ntenant_id = \"your_tenant_id\"\nuser_roles = {\n    \"ExampleApp.Admin\": \"ExampleApp.Admin\",\n    \"ExampleApp.User\": \"ExampleApp.User\",\n}\n\nclient_secret = \"your_client_secret\"\ndownstream_scope = \"your downstream API scope to be called on-behalf-of user\"\n\ninit_auth(user_roles, tenant_id, client_id,\n  init_obo_process=True, client_secret=client_secret, downstream_scope=downstream_scope)\n\nst.write(f\"Welcome, {st.session_state.username}\")\n\nst.write(f\"token for downstream API call {st.session_state.obo_token}\")\n\n# after a long time your token expires\nrefresh_obo_token(tenant_id, client_id, downstream_scope)\n</code></pre>"},{"location":"#5-known-issues-and-limitations","title":"5. Known Issues and Limitations","text":"<ul> <li>the client_secret is not actually integrated into the process, the streamlit-msal package is in the background using PublicClientApplication sign in process. yet by defining the required App roles of user, it still can work to certain extend to make sure the sign-in user is the actually the target user</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>streamlit_msal_2</li> </ul>"},{"location":"reference/streamlit_msal_2/","title":"API Reference","text":"<p>Yet another msal Single-Sign-On module of streamlit applications also for <code>ConfidentialClientApplication</code> by checking required App roles of signed-in users in the enterprise setup.</p> <p>Functions:</p> Name Description <code>init_auth</code> <p>Initializes the authentication process.</p> <code>refresh_obo_token</code> <p>Checks if the user is logged in and refreshes the obo access token if necessary. This can be only used after configure the <code>init_auth</code> function with <code>init_obo_process=True</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import streamlit as st\n&gt;&gt;&gt; from streamlit_msal_2 import init_auth, refresh_obo_token\n&gt;&gt;&gt; st.title(\"Streamlit MSAL Example\")\n&gt;&gt;&gt; client_id = \"your_client_id\"\n&gt;&gt;&gt; tenant_id = \"your_tenant_id\"\n&gt;&gt;&gt; user_roles = {\n...     \"ExampleApp.Admin\": \"ExampleApp.Admin\",\n...     \"ExampleApp.User\": \"ExampleApp.User\",\n... }\n&gt;&gt;&gt; init_auth(user_roles, tenant_id, client_id, init_obo_process=True)\n&gt;&gt;&gt; st.write(f\"Welcome, {st.session_state.username}\")\n&gt;&gt;&gt; refresh_obo_token(tenant_id, client_id, client_secret, scope)\n</code></pre>"},{"location":"reference/streamlit_msal_2/#streamlit_msal_2.init_auth","title":"<code>init_auth(user_roles=None, tenant_id=None, client_id=None, email_suffix=None, init_obo_process=False, client_secret=None, downstream_scope=None, retry_times=5)</code>","text":"<p>Initializes the authentication process for streamlit applications. This function also supports obo (on-behalf-of) token acquisition process, which can be enabled by setting the <code>init_obo_process=True</code>. Note that <code>client_secret</code>, <code>downstream_scope</code>, and <code>retry_times</code> are only used when <code>init_obo_process=True</code>. The sign-in button is by default on the st.sidebar</p> <p>This function initializes the authentication process by checking the user's account and role. If the user's account is not valid or does not have the required role, the function stops and displays an error message. If the user's account is valid and has the required role, the function sets the necessary information to the session state. The user sign information is stored in <code>st.session_state.auth_data</code>, the user name is stored in <code>st.session_state.username</code>, and the user roles are stored in <code>st.session_state.roles</code>.</p> <p>The obo process can be triggered by setting the <code>init_obo_process=True</code>. The obo token information is stored in <code>st.session_state.obo_info</code>, this is a dictionary containing the <code>access_token</code>, <code>refresh_token</code>, and the <code>expires_at</code>. The <code>access_token</code> will be stored in system environment variables as <code>OBO_TOKEN</code>, and also <code>st.session_state.obo_token</code> for easy access.</p> <p>Parameters:</p> Name Type Description Default <code>user_roles</code> <code>dict</code> <p>A dictionary containing the required roles. The keys are the role names and the values are the role descriptions. The default value is None. This corresponds to the user roles defined in the Azure App registration. The value of each key should be the value defined in the Azure App registration.</p> <code>None</code> <code>tenant_id</code> <code>str</code> <p>The tenant ID in Microsoft Azure. If the <code>TENANT_ID</code> is already set in the environment variables, this argument is not required. If no <code>TENANT_ID</code> is found in the environment variables, and no passed value is provided, streamlit will stop.</p> <code>None</code> <code>client_id</code> <code>str</code> <p>The client ID from Microsoft Azure App registration. If the <code>CLIENT_ID</code> is already set in the environment variables, this argument is not required. If no <code>CLIENT_ID</code> is found in the environment variables, and no passed value is provided, streamlit will stop.</p> <code>None</code> <code>email_suffix</code> <code>str</code> <p>The email suffix to match with the enterprise email suffix. The default value is None. If it is None, the function will not check the email suffix. The email suffix such as <code>@microsoft.com</code> is used to check whether the login user's email has valid enterprise email.</p> <code>None</code> <code>init_obo_process</code> <code>bool</code> <p>A boolean value to enable the obo token acquisition process. The default value is False. If set to True, the function will acquire the obo token.</p> <code>False</code> <code>client_secret</code> <code>str</code> <p>The client secret for the <code>cliend_id</code> above. If the <code>CLIENT_SECRET</code> is already set in the environment variables, this argument is not required. If no <code>CLIENT_SECRET</code> is found in the environment variables, and no passed value is provided, error will be raised.</p> <code>None</code> <code>downstream_scope</code> <code>str</code> <p>The scope for the obo token acquisition process. This is required when <code>init_obo_process=True</code>. Note that the scope here is the downstream API scope, not the scope of the provided <code>client_id</code> above.</p> <code>None</code> <code>retry_times</code> <code>int</code> <p>The number of times to retry the token acquisition process. The default value is 5.</p> <code>5</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; user_roles = {\n...     \"Admin\": \"Admin role\",\n...     \"User\": \"User role\",\n... }\n&gt;&gt;&gt; tenant_id = \"your_tenant_id\"\n&gt;&gt;&gt; client_id = \"your_client_id\"\n&gt;&gt;&gt; email_suffix = \"@microsoft.com\"\n&gt;&gt;&gt; init_auth(user_roles, tenant_id, client_id, email_suffix)\n</code></pre> Source code in <code>src/streamlit_msal_2/__init__.py</code> Python<pre><code>def init_auth(\n    user_roles: dict = None,\n    tenant_id: str = None,\n    client_id: str = None,\n    email_suffix: str = None,\n    init_obo_process: bool = False,\n    client_secret: str = None,\n    downstream_scope=None,\n    retry_times: int = 5,\n) -&gt; None:\n    \"\"\"\n    Initializes the authentication process for streamlit applications. This\n    function also supports obo (on-behalf-of) token acquisition process, which\n    can be enabled by setting the `init_obo_process=True`. Note that\n    `client_secret`, `downstream_scope`, and `retry_times` are only used when\n    `init_obo_process=True`. The sign-in button is by default on the st.sidebar\n\n    This function initializes the authentication process by checking the user's\n    account and role. If the user's account is not valid or does not have the\n    required role, the function stops and displays an error message. If the\n    user's account is valid and has the required role, the function sets the\n    necessary information to the session state. The user sign information is\n    stored in `st.session_state.auth_data`, the user name is stored in\n    `st.session_state.username`, and the user roles are stored in\n    `st.session_state.roles`.\n\n    The obo process can be triggered by setting the `init_obo_process=True`.\n    The obo token information is stored in `st.session_state.obo_info`, this\n    is a dictionary containing the `access_token`, `refresh_token`, and the\n    `expires_at`. The `access_token` will be stored in system environment\n    variables as `OBO_TOKEN`, and also `st.session_state.obo_token` for easy\n    access.\n\n    Args:\n        user_roles (dict): A dictionary containing the required roles. The keys\n            are the role names and the values are the role descriptions. The\n            default value is None. This corresponds to the user roles defined\n            in the Azure App registration. The value of each key should be the\n            value defined in the Azure App registration.\n        tenant_id (str): The tenant ID in Microsoft Azure. If the `TENANT_ID`\n            is already set in the environment variables, this argument is not\n            required. If no `TENANT_ID` is found in the environment variables,\n            and no passed value is provided, streamlit will stop.\n        client_id (str): The client ID from Microsoft Azure App registration.\n            If the `CLIENT_ID` is already set in the environment variables,\n            this argument is not required. If no `CLIENT_ID` is found in the\n            environment variables, and no passed value is provided, streamlit\n            will stop.\n        email_suffix (str): The email suffix to match with the enterprise email\n            suffix. The default value is None. If it is None, the function will\n            not check the email suffix. The email suffix such as\n            `@microsoft.com` is used to check whether the login user's email\n            has valid enterprise email.\n        init_obo_process (bool): A boolean value to enable the obo token\n            acquisition process. The default value is False. If set to True,\n            the function will acquire the obo token.\n        client_secret (str): The client secret for the `cliend_id` above. If\n            the `CLIENT_SECRET` is already set in the environment variables,\n            this argument is not required. If no `CLIENT_SECRET` is found in\n            the environment variables, and no passed value is provided, error\n            will be raised.\n        downstream_scope (str): The scope for the obo token acquisition\n            process. This is required when `init_obo_process=True`. Note that\n            the scope here is the downstream API scope, not the scope of the\n            provided `client_id` above.\n        retry_times (int): The number of times to retry the token acquisition\n            process. The default value is 5.\n\n    Examples:\n        &gt;&gt;&gt; user_roles = {\n        ...     \"Admin\": \"Admin role\",\n        ...     \"User\": \"User role\",\n        ... }\n        &gt;&gt;&gt; tenant_id = \"your_tenant_id\"\n        &gt;&gt;&gt; client_id = \"your_client_id\"\n        &gt;&gt;&gt; email_suffix = \"@microsoft.com\"\n        &gt;&gt;&gt; init_auth(user_roles, tenant_id, client_id, email_suffix)\n    \"\"\"\n    client_id = client_id or os.getenv(\"CLIENT_ID\", None)\n    tenant_id = tenant_id or os.getenv(\"TENANT_ID\", None)\n\n    if tenant_id is None or client_id is None:\n        st.warning(\n            \"Tenant ID and client ID cannot be None! \"\n            f\"Your input: tenant_id={tenant_id}, client_id={client_id}. \\n\"\n            \"Please set the TENANT_ID environment variable\"\n        )\n        st.stop()\n\n    with st.sidebar:\n        auth_data = Msal.initialize_ui(\n            client_id=client_id,\n            authority=f\"https://login.microsoftonline.com/{tenant_id}\",\n            scopes=[],\n            connecting_label=\"Connecting\",\n            disconnected_label=\"Disconnected\",\n            sign_in_label=\"Sign in\",\n            sign_out_label=\"Sign out\",\n        )\n\n        if not auth_data:\n            # not valid enterprise account\n            st.warning(\"Invalid account! No permission found for you\")\n            st.stop()\n\n        if email_suffix is not None:\n            # in case to match with enterprise email suffix\n            # e.g., @microsoft.com\n            if email_suffix not in auth_data[\"account\"][\"username\"]:\n                st.warning(\"Invalid account! No permission found for you\")\n                st.stop()\n\n        if _check_role(auth_data[\"idTokenClaims\"], user_roles) is False:\n            # check the login user has the required roles defined\n            # in the Microsoft Azure App registration\n            st.warning(\n                f\"Hello, {auth_data['account']['name']}, \"\n                \"No permission found for you\"\n            )\n            st.stop()\n\n        if \"auth_data\" not in st.session_state:\n            # set the names to the session state\n            st.session_state.auth_data = auth_data\n            st.session_state.username = auth_data[\"account\"][\"name\"]\n\n            st.session_state.roles = auth_data[\"idTokenClaims\"][\"roles\"]\n\n        if init_obo_process:\n            obo_token = _acquire_access_token_obo(\n                auth_data[\"idToken\"],\n                tenant_id=tenant_id,\n                client_id=client_id,\n                client_secret=client_secret,\n                downstream_scope=downstream_scope,\n                retry_times=retry_times,\n            )\n            if not obo_token:\n                st.write(\n                    \"Failed acquiring token, refresh the page and login again!\"\n                )\n                st.stop()\n            st.session_state.obo_info = {\n                \"access_token\": obo_token.get(\"access_token\"),\n                \"refresh_token\": obo_token.get(\"refresh_token\"),\n                \"expires_at\": datetime.datetime.now()\n                + datetime.timedelta(seconds=obo_token.get(\"expires_in\")),\n            }\n            os.environ[\"OBO_TOKEN\"] = obo_token.get(\"access_token\")\n            st.session_state.obo_token = obo_token.get(\"access_token\")\n</code></pre>"},{"location":"reference/streamlit_msal_2/#streamlit_msal_2.refresh_obo_token","title":"<code>refresh_obo_token(tenant_id=None, client_id=None, client_secret=None, downstream_scope=None)</code>","text":"<p>Checks if the user is logged in and refreshes the obo access token if necessary.</p> <p>This function will store the full obo token information in the <code>st.session_state.obo_info</code> and the current access token in the <code>st.session_state.obo_token</code>. This function can be only run after the <code>init_auth</code> function is called, and the <code>init_obo_process</code> is set to <code>True</code>, in the background, it uses the <code>st.session_state.obo_info</code> in user sign in process.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The refreshed access token.</p> Source code in <code>src/streamlit_msal_2/__init__.py</code> Python<pre><code>def refresh_obo_token(\n    tenant_id: str = None,\n    client_id: str = None,\n    client_secret: str = None,\n    downstream_scope=None,\n) -&gt; str:\n    \"\"\"\n    Checks if the user is logged in and refreshes the obo access token if\n    necessary.\n\n    This function will store the full obo token information in the\n    `st.session_state.obo_info` and the current access token in the\n    `st.session_state.obo_token`. This function can be only run after\n    the `init_auth` function is called, and the `init_obo_process` is set to\n    `True`, in the background, it uses the `st.session_state.obo_info` in\n    user sign in process.\n\n    Returns:\n        str: The refreshed access token.\n\n    Raises:\n        None\n    \"\"\"\n    tokens = st.session_state.obo_info\n\n    if not tokens:\n        st.write(\"User not logged in\")\n        return None\n\n    if tokens.get(\"expires_at\") &lt; datetime.datetime.now():\n        logger.info(\"Refreshing access token...\")\n\n        new_tokens = _refresh_access_token(\n            tenant_id=tenant_id,\n            client_id=client_id,\n            client_secret=client_secret,\n            downstream_scope=downstream_scope,\n            refresh_token=tokens.get(\"refresh_token\"),\n        )\n        tokens[\"access_token\"] = new_tokens.get(\"access_token\")\n        tokens[\"refresh_token\"] = new_tokens.get(\"refresh_token\")\n        tokens[\"expires_at\"] = datetime.datetime.now() + datetime.timedelta(\n            seconds=new_tokens.get(\"expires_in\")\n        )\n        st.session_state.obo_info = tokens\n        os.environ[\"OBO_TOKEN\"] = tokens[\"access_token\"]\n        st.session_state.obo_token = tokens[\"access_token\"]\n    return st.session_state.obo_info\n</code></pre>"}]}